---
description: 
globs: 
alwaysApply: false
---
# Java SE 学习指南

## 项目结构
```
src/
  ├── main/
  │   └── java/
  │       └── com/
  │           └── example/
  │               ├── basics/        # Java 基础语法示例
  │               ├── oop/           # 面向对象编程示例
  │               ├── collections/   # 集合框架示例
  │               ├── io/            # 输入输出示例
  │               ├── exceptions/    # 异常处理示例
  │               └── utils/         # 工具类
  └── test/
      └── java/                     # 单元测试
pom.xml                            # Maven 项目配置文件
README.md                          # 项目说明文档
```

## 学习路径

### 1. Java 基础语法
- 变量和数据类型
- 运算符
- 控制流程（if-else, switch, loops）
- 数组
- 方法

### 2. 面向对象编程
- 类和对象
- 继承
- 多态
- 接口
- 抽象类
- 封装

### 3. Java 核心特性
- 集合框架（List, Set, Map）
- 异常处理
- 输入输出（I/O）
- 多线程
- 泛型
- Lambda 表达式

## 开发规范

### 命名规范
- 类名：使用大驼峰命名法（PascalCase）
- 方法名和变量名：使用小驼峰命名法（camelCase）
- 常量：全大写，下划线分隔（UPPER_SNAKE_CASE）
- 包名：全小写，点号分隔（com.example.project）

### 代码格式
- 使用 4 个空格进行缩进
- 每行代码不超过 120 个字符
- 类和方法之间空一行
- 相关的代码块之间空一行

### 注释规范
- 类注释：说明类的用途、作者、创建时间
- 方法注释：说明方法的功能、参数、返回值
- 关键代码注释：解释复杂的业务逻辑

## 最佳实践

### 1. 代码组织
- 遵循单一职责原则
- 保持方法的简洁性
- 适当使用设计模式
- 编写单元测试

### 2. 性能优化
- 合理使用集合类
- 注意内存管理
- 避免创建不必要的对象
- 使用 StringBuilder 进行字符串拼接

### 3. 异常处理
- 使用具体的异常类型
- 合理处理异常
- 不要吞掉异常
- 记录异常信息

## 开发工具
- IDE：推荐使用 IntelliJ IDEA
- 构建工具：Maven
- 版本控制：Git
- 代码质量：SonarQube

## 学习资源
- Oracle 官方文档
- Java 编程思想
- Effective Java
- Java 核心技术

## 常见问题解决
- 编译错误检查
- 运行时异常处理
- 性能问题排查
- 内存泄漏分析

## 项目实践
每个主题都会包含：
1. 示例代码
2. 练习题
3. 单元测试
4. 最佳实践示例

## 注意事项
- 保持代码整洁
- 遵循 Java 编码规范
- 及时提交代码
- 编写完整的文档
- 进行代码审查

