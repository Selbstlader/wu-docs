import{_ as a,c as p,o as e,a4 as t}from"./chunks/framework.DLF8A2I8.js";const b=JSON.parse('{"title":"仿微信 IM 系统简介","description":"","frontmatter":{},"headers":[],"relativePath":"doc/Netty/1.md","filePath":"doc/Netty/1.md"}'),i={name:"doc/Netty/1.md"},l=t('<h2 id="本资源由-itjc8-com-收集整理" tabindex="-1">本资源由 itjc8.com 收集整理 <a class="header-anchor" href="#本资源由-itjc8-com-收集整理" aria-label="Permalink to &quot;本资源由 itjc8.com 收集整理&quot;">​</a></h2><h1 id="仿微信-im-系统简介" tabindex="-1">仿微信 IM 系统简介 <a class="header-anchor" href="#仿微信-im-系统简介" aria-label="Permalink to &quot;仿微信 IM 系统简介&quot;">​</a></h1><blockquote><p>微信从 2011 年 1 月 21 日诞生至今，已经成为国内数亿用户必不可少的即时通信工具，是男女老少手机中必备的顶级 App。Netty 是一个异步基于事件驱动的高性能网络通信框架，在互联网中间件领域网络通信层是无可争议的最强王者，两者强强联合又会擦出什么样的火花？在接下来的小节中，我将带领大家使用 Netty 一步一步实现微信 IM 聊天的核心功能。</p></blockquote><p>微信的聊天又分为单聊和群聊，下面分别来介绍一下。</p><h2 id="单聊流程" tabindex="-1">单聊流程 <a class="header-anchor" href="#单聊流程" aria-label="Permalink to &quot;单聊流程&quot;">​</a></h2><p>单聊指的是两个用户之间相互聊天。下面我们来看一下，用户单聊的基本流程</p><p><img src="https://user-gold-cdn.xitu.io/2018/8/9/1651c08e91cdd8e6?w=1228&amp;h=836&amp;f=png&amp;s=94796" alt="单聊流程"></p><ol><li>如上图，A 要和 B 聊天，首先 A 和 B 需要与服务器建立连接，然后进行一次登录流程，服务端保存用户标识和 TCP 连接的映射关系</li><li>A 发消息给 B，首先需要将带有 B 标识的消息数据包发送到服务器，然后服务器从消息数据包中拿到 B 的标识，找到对应的 B 的连接，将消息发送给 B</li><li>任意一方发消息给对方，如果对方不在线，需要将消息缓存，对方上线之后再发送</li></ol><p>我们把客户端与服务端之间相互通信的数据包称为<strong>指令数据包</strong>，指令数据包分为指令和数据，每一种指令对应客户端或者服务端的一种操作，数据部分对应的是指令处理需要的数据。</p><p>下面我们先来看一下，要实现单聊，客户端与服务端分别要实现哪些指令：</p><h2 id="单聊的指令" tabindex="-1">单聊的指令 <a class="header-anchor" href="#单聊的指令" aria-label="Permalink to &quot;单聊的指令&quot;">​</a></h2><h3 id="指令图示" tabindex="-1">指令图示 <a class="header-anchor" href="#指令图示" aria-label="Permalink to &quot;指令图示&quot;">​</a></h3><p><img src="https://user-gold-cdn.xitu.io/2018/9/24/1660adaac93d16e2?w=1240&amp;h=1233&amp;f=png&amp;s=175838" alt="image.png"></p><h3 id="指令列表" tabindex="-1">指令列表 <a class="header-anchor" href="#指令列表" aria-label="Permalink to &quot;指令列表&quot;">​</a></h3><p>指令内容</p><p>客户端</p><p>服务端</p><p>登录请求</p><p>发送</p><p>接收</p><p>登录响应</p><p>接收</p><p>发送</p><p>客户端发消息</p><p>发送</p><p>接收</p><p>服务端发消息</p><p>接收</p><p>发送</p><p>登出请求</p><p>发送</p><p>接收</p><p>登出响应</p><p>接收</p><p>发送</p><h2 id="群聊流程" tabindex="-1">群聊流程 <a class="header-anchor" href="#群聊流程" aria-label="Permalink to &quot;群聊流程&quot;">​</a></h2><p>群聊指的是一个组内多个用户之间的聊天，一个用户发到群组的消息会被组内任何一个成员接收，下面我们来看一下群聊的基本流程</p><p><img src="https://user-gold-cdn.xitu.io/2018/8/9/1651c08e91bfb935?w=1240&amp;h=872&amp;f=png&amp;s=183265" alt="image.png"></p><p>如上图，要实现群聊，其实和单聊类似</p><ol><li>A，B，C 依然会经历登录流程，服务端保存用户标识对应的 TCP 连接</li><li>A 发起群聊的时候，将 A，B，C 的标识发送至服务端，服务端拿到之后建立一个群聊 ID，然后把这个 ID 与 A，B，C 的标识绑定</li><li>群聊里面任意一方在群里聊天的时候，将群聊 ID 发送至服务端，服务端拿到群聊 ID 之后，取出对应的用户标识，遍历用户标识对应的 TCP 连接，就可以将消息发送至每一个群聊成员</li></ol><p>下面，我们再来看一下群聊除了需要实现上述指令之外，还需要实现的指令集</p><h2 id="群聊要实现的指令集" tabindex="-1">群聊要实现的指令集 <a class="header-anchor" href="#群聊要实现的指令集" aria-label="Permalink to &quot;群聊要实现的指令集&quot;">​</a></h2><h3 id="指令图示-1" tabindex="-1">指令图示 <a class="header-anchor" href="#指令图示-1" aria-label="Permalink to &quot;指令图示&quot;">​</a></h3><p><img src="https://user-gold-cdn.xitu.io/2018/9/24/1660ae0860e0cf88?w=1240&amp;h=1403&amp;f=png&amp;s=234300" alt="image.png"></p><h3 id="指令列表-1" tabindex="-1">指令列表 <a class="header-anchor" href="#指令列表-1" aria-label="Permalink to &quot;指令列表&quot;">​</a></h3><p>指令内容</p><p>客户端</p><p>服务端</p><p>创建群聊请求</p><p>发送</p><p>接收</p><p>群聊创建成功通知</p><p>接收</p><p>发送</p><p>加入群聊请求</p><p>发送</p><p>接收</p><p>群聊加入通知</p><p>接收</p><p>发送</p><p>发送群聊消息</p><p>发送</p><p>接收</p><p>接收群聊消息</p><p>接收</p><p>发送</p><p>退出群聊请求</p><p>发送</p><p>接收</p><p>退出群聊通知</p><p>接收</p><p>发送</p><h2 id="netty" tabindex="-1">Netty <a class="header-anchor" href="#netty" aria-label="Permalink to &quot;Netty&quot;">​</a></h2><p>我们使用 Netty 统一的 IO 读写 API 以及强大的 pipeline 来编写业务处理逻辑，在后续的章节中，我会通过 IM 这个例子，带你逐步了解 Netty 的以下核心知识点。</p><ul><li>服务端如何启动</li><li>客户端如何启动</li><li>数据载体 ByteBuf</li><li>长连自定义协议如何设计</li><li>粘包拆包原理与实践</li><li>如何实现自定义编解码</li><li>pipeline 与 channelHandler</li><li>定时发心跳怎么做</li><li>如何进行连接空闲检测</li></ul><h3 id="客户端使用-netty-的程序逻辑结构" tabindex="-1">客户端使用 Netty 的程序逻辑结构 <a class="header-anchor" href="#客户端使用-netty-的程序逻辑结构" aria-label="Permalink to &quot;客户端使用 Netty 的程序逻辑结构&quot;">​</a></h3><p><img src="https://user-gold-cdn.xitu.io/2018/8/9/1651c08e91ca8b74?w=1240&amp;h=733&amp;f=png&amp;s=57795" alt="image.png"></p><p>上面这幅图展示了客户端的程序逻辑结构</p><ol><li>首先，客户端会解析控制台指令，比如发送消息或者建立群聊等指令</li><li>然后，客户端会基于控制台的输入创建一个指令对象，用户告诉服务端具体要干什么事情</li><li>TCP 通信需要的数据格式为二进制，因此，接下来通过自定义二进制协议将指令对象封装成二进制，这一步称为协议的编码</li><li>对于收到服务端的数据，首先需要截取出一段完整的二进制数据包（拆包粘包相关的内容后续小节会讲解）</li><li>将此二进制数据包解析成指令对象，比如收到消息</li><li>将指令对象送到对应的逻辑处理器来处理</li></ol><h3 id="服务端使用-netty-的程序逻辑结构" tabindex="-1">服务端使用 Netty 的程序逻辑结构 <a class="header-anchor" href="#服务端使用-netty-的程序逻辑结构" aria-label="Permalink to &quot;服务端使用 Netty 的程序逻辑结构&quot;">​</a></h3><p><img src="https://user-gold-cdn.xitu.io/2018/8/21/1655969de0f3b8c8?w=1240&amp;h=647&amp;f=png&amp;s=87864" alt="image.png"></p><p>服务端的程序逻辑结构与客户端非常类似，这里不太赘述。</p><h2 id="本小册实现-im-的形式" tabindex="-1">本小册实现 IM 的形式 <a class="header-anchor" href="#本小册实现-im-的形式" aria-label="Permalink to &quot;本小册实现 IM 的形式&quot;">​</a></h2><p>由于本小册以传授 Netty 基础知识为主，故 IM 相关的图形化界面不会涉及，后续所有的聊天基于控制台进行，通过与控制台交互可以进行单聊和群聊。</p>',84),o=[l];function r(n,h,c,d,s,m){return e(),p("div",null,o)}const f=a(i,[["render",r]]);export{b as __pageData,f as default};
